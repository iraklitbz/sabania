"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  unplugin: () => unplugin,
  unpluginFactory: () => unpluginFactory
});
module.exports = __toCommonJS(src_exports);
var import_unplugin = require("unplugin");
var import_pathe = require("pathe");
var import_fs = require("fs");
var import_compiler_dom = require("@vue/compiler-dom");
function getRootBlock(root, block) {
  var _a;
  const node = root.children.find(
    (node2) => node2.type === 1 && node2.tag === block
  );
  if (node && block === "template" && node.children.length === 1) {
    const rootChild = node.children[0].type === 1 ? node.children[0] : void 0;
    const tag = ((_a = rootChild == null ? void 0 : rootChild.tag) != null ? _a : "").toLocaleLowerCase();
    if (rootChild && tag !== "formkit" && tag !== "form-kit" && tag !== "formkitschema" && tag !== "form-kit-schema" && !rootChild.isSelfClosing) {
      return rootChild;
    }
  }
  return node;
}
function isSetupScript(node) {
  return node.props.some((prop) => prop.type === 6 && prop.name === "setup");
}
function langAttr(node) {
  var _a;
  if (!node)
    return "";
  const langProp = node.props.find(
    (prop) => prop.type === 6 && prop.name === "lang"
  );
  if (langProp && ((_a = langProp.value) == null ? void 0 : _a.content)) {
    return ` lang="${langProp.value.content}"`;
  }
  return "";
}
function injectProviderImport(code) {
  let root;
  try {
    root = (0, import_compiler_dom.parse)(code);
  } catch (err) {
    console.warn("Failed to parse SFC:", code);
    console.error(err);
    return code;
  }
  const script = getRootBlock(root, "script");
  const importStatement = `import { FormKitLazyProvider } from '@formkit/vue'`;
  const setupScript = root.children.find(
    (node) => node.type === 1 && node.tag === "script" && isSetupScript(node)
  );
  if (!setupScript) {
    return `<script setup${langAttr(script)}>${importStatement}</script>
${code}`;
  }
  const startAt = setupScript.children[0].loc.start.offset;
  const before = code.substring(0, startAt);
  const after = code.substring(startAt);
  return `${before}
${importStatement}${after}`;
}
function injectProviderComponent(code, id, config, defaultConfig) {
  let root;
  try {
    root = (0, import_compiler_dom.parse)(code);
  } catch (err) {
    console.warn("Failed to parse SFC:", code);
    console.error(err);
    return { code };
  }
  const open = `<FormKitLazyProvider${config ? ' config-file="true"' : ""}${defaultConfig ? "" : ' :default-config="false"'}>`;
  const close = "</FormKitLazyProvider>";
  const template = getRootBlock(root, "template");
  if (!template) {
    console.warn(
      `No <template> block found in ${id}. Skipping FormKitLazyProvider injection.`
    );
    return { code, map: null };
  }
  const startInsertAt = template.children[0].loc.start.offset;
  const endInsertAt = template.children[template.children.length - 1].loc.end.offset;
  const before = code.substring(0, startInsertAt);
  const content = code.substring(startInsertAt, endInsertAt);
  const after = code.substring(endInsertAt);
  code = `${before}
${open}
${content}
${close}
${after}`;
  return { code, map: null };
}
function resolveConfig(configFile) {
  const exts = ["ts", "mjs", "js"];
  const dir = configFile.startsWith(".") ? process.cwd() : "";
  let paths = [];
  if (exts.some((ext) => configFile.endsWith(ext))) {
    paths = [(0, import_pathe.resolve)(dir, configFile)];
  } else {
    paths = exts.map((ext) => (0, import_pathe.resolve)(dir, `${configFile}.${ext}`));
  }
  return paths.find((path) => (0, import_fs.existsSync)(path));
}
var CONTAINS_FORMKIT_RE = /<FormKit|<form-kit/;
var FORMKIT_CONFIG_RE = /(\/\*\s?@__formkit\.config\.ts__\s?\*\/(?:.|\n)+?)\)/g;
var unpluginFactory = (options = {
  configFile: "./formkit.config",
  defaultConfig: true
}) => {
  const configPath = resolveConfig(options.configFile || "./formkit.config");
  return {
    name: "unplugin-formkit",
    enforce: "pre",
    vite: {
      config() {
        return {
          optimizeDeps: {
            exclude: ["@formkit/vue"]
          }
        };
      }
    },
    // webpack's id filter is outside of loader logic,
    // an additional hook is needed for better perf on webpack
    transformInclude() {
      return true;
    },
    // just like rollup transform
    async transform(code, id) {
      if (configPath && FORMKIT_CONFIG_RE.test(code)) {
        code = code.replace(FORMKIT_CONFIG_RE, `"${configPath}")`);
        if (options.defaultConfig === false) {
          code = code.replace(
            /\/\* @__default-config__ \*\/(?:.|\n)+?\/\* @__default-config__ \*\//gi,
            ""
          );
        }
        return { code, map: null };
      }
      if (id.endsWith(".vue") && CONTAINS_FORMKIT_RE.test(code)) {
        return injectProviderComponent(
          injectProviderImport(code),
          id,
          !!configPath,
          options.defaultConfig
        );
      }
      return;
    }
  };
};
var unplugin = /* @__PURE__ */ (0, import_unplugin.createUnplugin)(unpluginFactory);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  unplugin,
  unpluginFactory
});
exports.default = module.exports;